<?php

/**
 * @file
 * Functions to support theming in the Modins theme.
 */

use Drupal\Core\Template\Attribute;
use Drupal\block\Entity\Block;
use Drupal\Core\Url;

$theme_path = \Drupal::service('extension.list.theme')->getPath('modins');

include_once $theme_path . '/includes/functions.php';
include_once $theme_path . '/includes/oembed.php';
include_once $theme_path . '/includes/override.php';
include_once $theme_path . '/includes/contact.php';
include_once $theme_path . '/customize/fonts.php';

function modins_preprocess_page(&$variables) {
  global $base_url;

  $current_theme = \Drupal::config('system.theme')->get('default');
  $sub_theme = '';
  $theme_handler = \Drupal::service('theme_handler');
  if($theme_handler->themeExists($current_theme)){
    $theme_handler = $theme_handler->getTheme($current_theme);
    $theme_info = $theme_handler->info;
    if(isset($theme_info['base theme']) && !empty($theme_info['base theme']) && strpos($theme_info['base theme'], 'avias_')){
      $sub_theme = $current_theme;
    }
  }

  $theme_path = \Drupal::service('extension.list.theme')->getPath('modins');
  
  $variables['sticky_menu'] = theme_get_setting('sticky_menu');

  $variables['preloader'] = theme_get_setting('preloader');
 
  $variables['theme_path'] = $theme_path;

  //Header setting -----------
  $header = 'header';
  if(theme_get_setting('default_header')){
    $header = theme_get_setting('default_header');
  }

  if(isset($variables['gva_header']) && $variables['gva_header'] && $variables['gva_header']!='_none' ){
    $header = $variables['gva_header'];
  }
  
  $header_skin = '';
  if($sub_theme){
    $theme_path_sub = \Drupal::service('extension.list.theme')->getPath($sub_theme);
    if(file_exists($theme_path_sub . '/templates/page/' . trim($header) . '.html.twig')){
      $header_skin  = $theme_path_sub . '/templates/page/' . trim($header) . '.html.twig';
    }elseif(file_exists($theme_path . '/templates/page/' . trim($header) . '.html.twig')){
      $header_skin  = $theme_path . '/templates/page/' . trim($header) . '.html.twig';
    }
  }else{
    if(file_exists($theme_path . '/templates/page/' . trim($header) . '.html.twig')){
      $header_skin  = $theme_path . '/templates/page/' . trim($header) . '.html.twig';
    }
  }
  if(empty($header_skin)) $header_skin = $theme_path . '/templates/page/header.html.twig';

  $variables['theme_path'] = $theme_path;

  $variables['header_skin'] = $header_skin;

  $variables['link_request'] = theme_get_setting('link_request');
 
}

function modins_preprocess_image(&$variables) {
  if (isset($variables['attributes']['width']) && isset($variables['attributes']['height'])) {
    unset($variables['attributes']['width']);
    unset($variables['attributes']['height']);
  }
}

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 *
 * Adds body classes if certain regions have content.
 */
function modins_preprocess_html(&$variables) {
  global $theme, $base_url;
  global $parent_root;

  $theme_path = \Drupal::service('extension.list.theme')->getPath('modins');

  if(theme_get_setting('enable_panel') == '1' ){
    $current_url = $_SERVER["HTTP_HOST"] . $_SERVER["REQUEST_URI"];
    $current_url = preg_replace('/([?&])gvas=[^&]+(&|$)/','$2',$current_url);
    if(strpos($current_url, '?')){
       $current_url .= '&';
    }
    else{ 
       $current_url .= '?';
    }
    $variables['current_url'] = $current_url;
  }

  $tmp_logo = theme_get_setting('logo');

  $variables['site_logo'] = $tmp_logo['url'];

  $variables['theme_path'] = $theme_path;

  if(theme_get_setting('customize_css') ){
    $custom_style  = preg_replace( '!/\*[^*]*\*+([^/][^*]*\*+)*/!', '', theme_get_setting('customize_css') );
    $custom_style = str_replace( array( "\r\n", "\r", "\n", "\t", '  ', '   ', '    ' ), '', $custom_style );
    $variables['customize_css'] =  $custom_style;
  }

  //--- Customize gavias_hook_themer ---
  $customize_styles = '';
  $json = '';

  ob_start();
  $json = \Drupal::config('gavias_hook_themer.settings')->get('gavias_customize');
  
  $variables['links_google_fonts'] = modins_links_typography_font($json);
  require_once($theme_path . '/customize/dynamic_style.php');
  $customize_styles = ob_get_clean();
  $customize_styles  = preg_replace( '!/\*[^*]*\*+([^/][^*]*\*+)*/!', '', $customize_styles );
  $customize_styles = str_replace( array( "\r\n", "\r", "\n", "\t", '  ', '   ', '    ' ), '', $customize_styles );

  $variables['customize_styles'] = $customize_styles;

  //Form customize 
  $user = \Drupal::currentUser();

  if(theme_get_setting('enable_customize') == 1 &&  \Drupal::moduleHandler()->moduleExists('gavias_hook_themer') && ($user->hasPermission('administer gavias_customize') || $user->hasPermission('administer gavias_customize preview')) ){
    $url_customize_save = Url::fromRoute('gavias_hook_themer.admin.customize_save', array(), array('absolute' => TRUE))->toString();
    $variables['#attached']['drupalSettings']['gavias_customize']['save'] = $url_customize_save;  
    $url_customize_preview = Url::fromRoute('gavias_hook_themer.admin.customize_preview', array(), array('absolute' => TRUE))->toString();
    $variables['#attached']['drupalSettings']['gavias_customize']['preview'] = $url_customize_preview;  
    $variables['#attached']['library'][] = 'gavias_hook_themer/customize';
 
    $variables['#attached']['drupalSettings']['gavias_customize']['json'] = $json;

    $variables['addon_template'] = '';
    $variables['save_customize_permission'] = 'hidden';
    $variables['fonts'] = modins_render_option_font();

    if(file_exists($theme_path . '/templates/addon/skins.html.twig')){
      $variables['addon_template'] = $theme_path . '/templates/addon/skins.html.twig';
    }

    if($user->hasPermission('administer gavias_customize')){
      $variables['save_customize_permission'] = 'show';
    }

    $current_url = $_SERVER["HTTP_HOST"] . $_SERVER["REQUEST_URI"];
    $current_url = preg_replace('/([?&])gvas=[^&]+(&|$)/','$2',$current_url);
    if(strpos($current_url, '?')){
       $current_url .= '&';
    }
    else{
       $current_url .= '?';
    }
    $variables['current_url'] = $current_url;
  }
  
  //---- End customize gavias themer ---


  // Add information about the number of sidebars.
  if (!empty($variables['page']['sidebar_first']) && !empty($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = 'layout-two-sidebars';
  }
  elseif (!empty($variables['page']['sidebar_first'])) {
    $variables['attributes']['class'][] = 'layout-one-sidebar';
    $variables['attributes']['class'][] = 'layout-sidebar-first';
  }
  elseif (!empty($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = 'layout-one-sidebar';
    $variables['attributes']['class'][] = 'layout-sidebar-second';
  }
  else {
    $variables['attributes']['class'][] = 'layout-no-sidebars';
  }

  $variables['attributes']['class'][] = theme_get_setting('site_layout');
  $variables['attributes']['class'][] = theme_get_setting('footer_skin');

  if(theme_get_setting('preloader') == '1'){
    $variables['preloader'] = 1;
  }else{
    $variables['preloader'] = 0;
  }
}

function modins_library_info_build() {
  $api_key = theme_get_setting('google_key');
  if(empty($api_key)) $api_key = 'AIzaSyBWk2I6T6psDLCXg8CDVFSEXvigfNU1V-E';
  $libraries = [];
  $theme_path = \Drupal::service('extension.list.theme')->getPath('modins');
  $libraries['modins.gmap_api'] = [
    'version' => '1.x',
    'js' => [
        'https://maps.googleapis.com/maps/api/js?key=' . $api_key . '&libraries=places' => [
            'type' => 'external',
        ],
        'assets/vendor/gmap3.js' => [],
        'assets/vendor/jquery.ui.map.min.js' => [],
    ],
  ];
  return $libraries;
}

/**
 * Implements hook_preprocess_HOOK() for maintenance-page.html.twig.
 */
function modins_preprocess_maintenance_page(&$variables) {
  if (!$variables['db_is_active']) {
    $variables['site_name'] = '';
  }
}

/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */
function modins_preprocess_block(&$variables) {
  // Add a clearfix class to system branding blocks.

  if ($variables['plugin_id'] == 'system_branding_block') {
    $variables['attributes']['class'][] = 'clearfix';
    $tmp_logo = theme_get_setting('logo');
    $variables['setting_logo'] = $tmp_logo['use_default'];
  }
} 

function modins_preprocess_block__system_breadcrumb_block(&$variables){
  $styles = array();
  $bg_image = base_path() . \Drupal::service('extension.list.theme')->getPath('modins') . '/assets/images/breadcrumb.jpg';
  $bg_color = '#1B1525';
  $bg_position = 'center center';
  $bg_repeat = 'no-repeat';
  $text_style = 'text-light';
  
  if (!empty($variables['elements']['#id'])) {
    $block = Block::load($variables['elements']['#id']);
    if($variables['plugin_id'] == 'system_breadcrumb_block'){
      $_id = $variables['elements']['#id'];
      $breadcrumb_background_color = $block->getThirdPartySetting('gavias_hook_themer', 'breadcrumb_background_color');
      $breadcrumb_background_position = $block->getThirdPartySetting('gavias_hook_themer', 'breadcrumb_background_position');
      $breadcrumb_background_repeat = $block->getThirdPartySetting('gavias_hook_themer', 'breadcrumb_background_repeat');
      $breadcrumb_color_style = $block->getThirdPartySetting('gavias_hook_themer', 'breadcrumb_color_style');
      $breadcrumb_background_image_path = \Drupal::config('gavias_hook_themer.settings')->get('breadcrumb_background_image_path_' . $_id);
      if($breadcrumb_color_style){
        $text_style = $breadcrumb_color_style;
      }
      if($breadcrumb_background_color){
        $bg_color = $breadcrumb_background_color;
      }
      if($breadcrumb_background_position){
        $bg_position = $breadcrumb_background_position;
      }
      if($breadcrumb_background_repeat){
        $bg_repeat = $breadcrumb_background_repeat;
      }
      if($breadcrumb_background_image_path){
        $bg_image = \Drupal::service('file_url_generator')->generateAbsoluteString($breadcrumb_background_image_path);
      }
    }
  }

  $variables['attributes']['class'][] = $text_style;
  $styles[] = "background-color: {$bg_color};";
  if($bg_image){
    $styles[] = "background-image: url('{$bg_image}');";
  }
  $styles[] = "background-position: {$bg_position};";
  $styles[] = "background-repeat: {$bg_repeat};";
  $variables['custom_style'] = implode('', $styles);

  //Breadcrumb title
  $title = '';
  $request = \Drupal::request();
  $title = '';
  if ($route = $request->attributes->get(\Drupal\Core\Routing\RouteObjectInterface::ROUTE_OBJECT)) {
    $title = \Drupal::service('title_resolver')->getTitle($request, $route);
  } 
   $variables['breadcrumb_title'] = $title;
}

/**
 * Implements hook_preprocess_HOOK() for page templates.
 */
function modins_preprocess_page_title(&$variables) {
  // Since the title and the shortcut link are both block level elements,
  // positioning them next to each other is much simpler with a wrapper div.
  if (!empty($variables['title_suffix']['add_or_remove_shortcut']) && $variables['title']) {
    // Add a wrapper div using the title_prefix and title_suffix render
    // elements.
    $variables['title_prefix']['shortcut_wrapper'] = array(
      '#markup' => '<div class="shortcut-wrapper clearfix">',
      '#weight' => 100,
    );
    $variables['title_suffix']['shortcut_wrapper'] = array(
      '#markup' => '</div>',
      '#weight' => -99,
    );
    // Make sure the shortcut link is the first item in title_suffix.
    $variables['title_suffix']['add_or_remove_shortcut']['#weight'] = -100;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 */
function modins_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  if ($variables['element']['#form_id'] == 'search_block_form') {
    $suggestions[] = 'form__search_block_form';
  }
}

/**
 * Implements hook_form_alter() to add classes to the search form.
 */
function modins_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if (in_array($form_id, ['search_block_form', 'search_form'])) {
    $key = ($form_id == 'search_block_form') ? 'actions' : 'basic';
    if (!isset($form[$key]['submit']['#attributes'])) {
      $form[$key]['submit']['#attributes'] = new Attribute();
    }
    $form[$key]['submit']['#attributes']->addClass('search-form__submit');
  }
}

function modins_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  if ($node = \Drupal::request()->attributes->get('node')) {
    if(is_object($node)){
      if($node->hasField('gva_node_layout')){
        $layout = $node->get('gva_node_layout')->value;
        if($layout){
          array_splice($suggestions, 1, 0, 'page__layout__' . $layout);
        }else{
          array_splice($suggestions, 1, 0, 'page__node__' . $node->getType());
        } 
      }else{
        array_splice($suggestions, 1, 0, 'page__node__' . $node->getType());
      }
    }else{
      array_splice($suggestions, 1, 0, 'page__layout__container_no_sidebar');
    }
  }
}

function modins_theme_suggestions_field_alter(&$suggestions, $variables) {
  $suggestions[] = 'field__' . 
  $variables['element']['#field_name'] . '__' . 
  $variables['element']['#view_mode'];
}

function modins_preprocess_views_view(&$variables){
  global $gva_node_index;
  $gva_node_index = 0;
  $view = $variables['view'];
  $variables['attributes']['class'][]="gva-view";
  if(is_numeric(strpos($view->current_display, 'page'))){
    $variables['attributes']['class'][] = "view-page";
  }
}


function modins_page_attachments_alter(array &$attachments) {
  $style = '';
  if(theme_get_setting('logo_width')&& !empty(theme_get_setting('logo_width'))){
    $logo_width = theme_get_setting('logo_width');
    $style .= '.header-one__left{-ms-flex: 0 0 ' . $logo_width . '!important; flex:0 0 ' . $logo_width .'!important;}';
    $style .= '.header-one__right{-ms-flex: 0 0 calc(100% - '.$logo_width.')!important; flex: 0 0 calc(100% - '.$logo_width.')!important;}';
    $style .= 'header .site-branding-logo{max-width:'.$logo_width.'!important;}';
  }
  if(theme_get_setting('logo_padding_top') && !empty(theme_get_setting('logo_padding_top'))){
    $style .= 'header .site-branding-logo{padding-top:'.theme_get_setting('logo_padding_top').'!important; }';
  }
  if(theme_get_setting('logo_padding_bottom') && !empty(theme_get_setting('logo_padding_bottom'))){
    $style .= 'header .site-branding-logo{padding-bottom:'.theme_get_setting('logo_padding_bottom').'!important; }';
  }
  $attachments['#attached']['html_head'][] = [
    [
      '#type' => 'html_tag',
      '#tag' => 'style',
      '#value' => $style,
    ],
    'style-logo',
  ];
}
